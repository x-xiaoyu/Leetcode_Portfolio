// Problem: 34.find-first-and-last-position-of-element-in-sorted-array
// Medium 2pts
// 04/11/2024
// Topics: Array, Binary Search

// Description: Given an array of integers nums sorted in non-decreasing order,
// find the starting and ending position of a given target value.
// If target is not found in the array, return [-1, -1].

// Links: https://leetcode.com/problems/find-first-and-last-position-of-element-in-sorted-array/description/

int searchLeftBorder(int *nums, int numsSize, int target)
{
    int left = 0;
    int right = numsSize - 1;
    int leftBorder = -1;

    while (left <= right)
    {
        int mid = left + ((right - left) >> 1);

        if (nums[mid] == target)
        {
            leftBorder = mid;
            right = mid - 1;
        }
        else if (nums[mid] > target)
        {
            right = mid - 1;
        }
        else
        {
            left = mid + 1;
        }
    }
    return leftBorder;
}

int searchRightBorder(int *nums, int numsSize, int target)
{
    int left = 0;
    int right = numsSize - 1;
    int rightBorder = -1;

    while (left <= right)
    {
        int mid = left + ((right - left) >> 1);

        if (nums[mid] == target)
        {
            rightBorder = mid;
            left = mid + 1;
        }
        else if (nums[mid] > target)
        {
            right = mid - 1;
        }
        else
        {
            left = mid + 1;
        }
    }
    return rightBorder;
}

int *searchRange(int *nums, int numsSize, int target, int *returnSize)
{
    int leftBorder = searchLeftBorder(nums, numsSize, target);
    int rightBorder = searchRightBorder(nums, numsSize, target);

    *returnSize = 2;

    int *resNums = (int *)malloc(sizeof(int) * 2);
    resNums[0] = leftBorder;
    resNums[1] = rightBorder;

    return resNums;
}